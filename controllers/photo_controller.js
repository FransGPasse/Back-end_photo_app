const { matchedData, validationResult } = require("express-validator");
const models = require("../models");

//!Visar alla foton som tillh칬r anv칛ndaren i databasen photo_app
const showAll = async (req, res) => {
	//"Lazy"-laddar alla albumn som tillh칬r den autentiserade anv칛ndare
	await req.user.load("Photo");

	//Skickar statuskod 200 om det godk칛nns och skickar med fotonen. Om det inte godk칛nns 칛r det fel vid autentiseringen och d친 kommer felkod d칛rifr친n.
	res.status(200).send({
		status: "success",
		data: {
			Photo: req.user.related("Photo"),
		},
	});
};

//!Visar ett specifikt foto som tillh칬r anv칛ndaren fr친n databasen photo_app
const showSpecific = async (req, res) => {
	//"Lazy"-laddar alla foton som tillh칬r den autentiserade anv칛ndaren
	await req.user.load("Photo");

	//L칛gger alla anv칛ndarens foton i en variabel
	const relatedPhotos = req.user.related("Photo");

	//Kollar ifall anv칛ndaren 칛ger fotot som st칛mmer 칬verens med ID:t i requesten
	usersPhoto = relatedPhotos.find((photo) => photo.id == req.params.id);

	//Om inte fotot finns eller anv칛ndaren inte har beh칬righet till det s친 skickas denna felkoden annars...
	if (!usersPhoto) {
		return res.send({
			status: "fail",
			data: "Photo doesn't belong to user or doesn't exist. 游땗",
		});
	}

	//...Skickar vi ut det
	res.send({
		status: "success",
		data: {
			usersPhoto,
		},
	});
};

//!Skapar ett "photo" i databasen photo_app
const register = async (req, res) => {
	//Kollar efter valideringsfel
	const errors = validationResult(req);

	if (!errors.isEmpty()) {
		//Och skickar is친fall med felkod och var det blev fel
		return res.status(422).send({ status: "fail", data: errors.array() });
	}

	const validData = matchedData(req);
	validData.user_id = req.user.id;

	//F칬rs칬ker l칛gga til ett foto i databasen
	try {
		const photo = await new models.Photo(validData).save();
		res.send({
			status: "success",
			message: "Photo created successfully 游녨游낖",
			data: {
				photo,
			},
		});

		//Skickar en felkod om n친got gick snett fr친n serverns h친ll
	} catch (error) {
		res.status(500).send({
			status: "error",
			message:
				"Something went wrong when trying to create a photo in the database. 游땻",
		});
		throw error;
	}
};

//!Uppdaterar ett foto i databasen photo_app
const update = async (req, res) => {
	const Photo_id = req.params.id;
	const User_id = req.user.id;

	//Kollar s친 fotot finns och att det tillh칬r anv칛ndaren
	const photo = await new models.Photo({
		id: Photo_id,
		User_id: User_id,
	}).fetch({
		require: false,
	});

	//Om inte s친 skickas denna felkoden
	if (!photo) {
		res.status(404).send({
			status: "fail",
			data: "Either the photo doesn't exist or the user isn't authorized. 游땗",
		});
		return;
	}

	//Kollar efter valideringsfel
	const errors = validationResult(req);

	//Och skickar is친fall med felkod och var det blev fel
	if (!errors.isEmpty()) {
		return res.status(422).send({ status: "fail", data: errors.array() });
	}

	//F칬rs칬ker uppdatera ett foto i databasen
	const validData = matchedData(req);

	try {
		const updatedPhoto = await photo.save(validData);

		res.send({
			status: "success",
			data: {
				updatedPhoto,
			},
		});

		//Skickar en felkod om n친got gick snett fr친n serverns h친ll
	} catch (error) {
		res.status(500).send({
			status: "error",
			message:
				"Something went wrong when trying to create a photo in the database. 游땻",
		});
		throw error;
	}
};

module.exports = { showAll, showSpecific, register, update };
