const { matchedData, validationResult } = require("express-validator");
const models = require("../models");

//!L칛ser alla album som tillh칬r anv칛ndaren i databasen photo_app
const readAll = async (req, res) => {
	//"Lazy"-laddar alla album som tillh칬r den autentiserade anv칛ndaren
	await req.user.load("Album");

	//Skickar statuskod 200 om det godk칛nns och skickar med albumet/albumen. Om det inte godk칛nns 칛r det fel vid autentiseringen och d친 kommer felkod d칛rifr친n.
	res.status(200).send({
		status: "success",
		data: {
			Album: req.user.related("Album"),
		},
	});
};

//!L칛ser ett specifikt album som tillh칬r anv칛ndaren fr친n databasen photo_app
const readSpecific = async (req, res) => {
	//"Lazy"-laddar alla albumn som tillh칬r den autentiserade anv칛ndaren
	await req.user.load("Album");

	Album_id = req.params.id;
	User_id = req.user.id;

	//L칛gger alla anv칛ndarens album i en variabel
	const relatedAlbum = req.user.related("Album");

	//Kollar ifall anv칛ndaren 칛ger albumet som st칛mmer 칬verens med ID:t i requesten
	usersAlbum = relatedAlbum.find((album) => album.id == req.params.id);

	//Om inte albumet finns eller anv칛ndaren inte har beh칬righet till det s친 skickas denna felkoden
	if (!usersAlbum) {
		return res.status(404).send({
			status: "fail",
			data: "Either the album doesn't exist or the user isn't authorized. 游땗",
		});
	}

	//H칛mtar albumet med det inskickade ID:t och skickar med det relaterade fotonen
	const selectedAlbum = await models.Album.fetchById(Album_id, {
		withRelated: ["Photo"],
	});

	res.send({
		status: "success",
		data: {
			selectedAlbum,
		},
	});
};

//!Skapar ett "album" i databasen photo_app
const createAlbum = async (req, res) => {
	//Kollar efter valideringsfel
	const errors = validationResult(req);

	if (!errors.isEmpty()) {
		//Och skickar is친fall med felkod och var det blev fel
		return res.status(422).send({ status: "fail", data: errors.array() });
	}

	//H칛mtar ut den validerade datan fr친n express validator:n
	const validData = matchedData(req);
	validData.user_id = req.user.id;

	//F칬rs칬ker l칛gga till ett album i databasen
	try {
		const album = await new models.Album(validData).save();
		res.status(200).send({
			status: "success",
			message: "Album created successfully! 游봅",
			data: {
				album,
			},
		});

		//Skickar en felkod om n친got gick snett fr친n serverns h친ll
	} catch (error) {
		res.status(500).send({
			status: "error",
			message:
				"Something went wrong when trying to create an album in the database. 游땻",
		});
		throw error;
	}
};

//!L칛gger till ett foto i ett album via relationstabellen
const postToAlbum = async (req, res) => {
	//H칛mtar ut den validerade datan fr친n express validator:n
	const validData = matchedData(req);

	//"Lazy"-laddar ALLA anv칛ndarens album och albumn, och...
	await req.user.load("Album");
	await req.user.load("Photo");

	//...L칛gger de i varsin variabel
	const relatedAlbums = req.user.related("Album");
	const relatedPhotos = req.user.related("Photo");

	//Kollar s친 det finns ett album med ID som st칛mmer 칬verens med ID:t ifr친n JSON-datan i request body:n och...
	usersPhoto = relatedPhotos.find((photo) => photo.id == validData.photo_id);

	//...Kollar ifall det finns ett album med ID som st칛mmer 칬verens med Album-ID:t fr친n URL:n och...
	usersAlbum = relatedAlbums.find((album) => album.id == req.params.id);

	//J칛mf칬r de b친da tillsammans f칬r att skicka ut ett felmeddelande is친fall
	if (!usersAlbum || !usersPhoto) {
		return res.status(404).send({
			status: "fail",
			data: "Either the photo or album doesn't exist, or the user isn't authorized. 游땗",
		});
	}

	//H칛mtar det valda albumet med redan tillh칬rande foton, exklusive det som ska l칛ggas till
	const album = await new models.Album({ id: req.params.id }).fetch({
		withRelated: ["Photo"],
	});

	//Skapar en variabel f칬r alla foton i albumet
	const photo = album.related("Photo");

	//Kollar ifall fotot med matchande ID redan finns i albumet och is친fall...
	const existingPhoto = photo.find((photo) => photo.id == validData.photo_id);

	//Skriv att det redan finns, annars...
	if (existingPhoto) {
		return res.status(400).send({
			status: "fail",
			data: "Photo already exists. 游뱓",
		});
	}

	//...F칬rs칬k l칛gga till fotot till albumet via relationsdatabasen
	try {
		await album.Photo().attach(validData.photo_id);

		res.status(200).send({
			status: "success",
			data: null,
		});

		//F친ngar fel och skickar ett felmeddelande
	} catch (error) {
		res.status(500).send({
			status: "error",
			message:
				"Exception thrown in database when adding a photo to a user.",
		});
		throw error;
	}
};

//!Uppdaterar ett album i databasen photo_app
const updateAlbum = async (req, res) => {
	const Album_id = req.params.id;
	const User_id = req.user.id;

	//Kollar s친 albumet finns och att det tillh칬r anv칛ndaren
	const album = await new models.Album({
		id: Album_id,
		User_id: User_id,
	}).fetch({
		require: false,
	});

	//Om inte s친 skickas denna felkoden
	if (!album) {
		res.status(404).send({
			status: "fail",
			data: "Either the album doesn't exist or the user isn't authorized. 游땗",
		});
		return;
	}

	//Kollar efter valideringsfel
	const errors = validationResult(req);

	//Och skickar is친fall med felkod och var det blev fel
	if (!errors.isEmpty()) {
		return res.status(422).send({ status: "fail", data: errors.array() });
	}

	//H칛mtar ut den validerade datan fr친n express validator:n
	const validData = matchedData(req);

	//F칬rs칬ker uppdatera albumet i databasen
	try {
		const updatedAlbum = await album.save(validData);

		res.send({
			status: "success",
			data: {
				updatedAlbum,
			},
		});

		//Skickar en felkod om n친got gick snett fr친n serverns h친ll
	} catch (error) {
		res.status(500).send({
			status: "error",
			message:
				"Something went wrong when trying to update an album in the database. 游땻",
		});
		throw error;
	}
};

module.exports = {
	readAll,
	readSpecific,
	createAlbum,
	postToAlbum,
	updateAlbum,
};
